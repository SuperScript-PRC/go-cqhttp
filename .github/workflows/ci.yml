name: CI

on: [push, pull_request, workflow_dispatch]

env:
  BINARY_PREFIX: "go-cqhttp_"
  BINARY_SUFFIX: ""
  COMMIT_ID: "${{ github.sha }}"
  PR_PROMPT: "::warning:: Build artifact will not be uploaded due to the workflow is trigged by pull request."

jobs:
  build:
    name: Build binary CI
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # build and publish in parallel: linux/386, linux/amd64, windows/386, windows/amd64, darwin/amd64, darwin/arm64
        goos: [linux, windows, darwin]
        goarch: ["386", amd64, arm, arm64]
        exclude:
          - goos: darwin
            goarch: arm
          - goos: darwin
            goarch: "386"
      fail-fast: true
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          cache: true
          go-version: '1.20'
      - name: Build binary file
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          IS_PR: ${{ !!github.head_ref }}
        run: |
          if [ $GOOS = "windows" ]; then export BINARY_SUFFIX="$BINARY_SUFFIX.exe"; fi
          if $IS_PR ; then echo $PR_PROMPT; fi
          export BINARY_NAME="$BINARY_PREFIX"$GOOS"_$GOARCH$BINARY_SUFFIX"
          export CGO_ENABLED=0
          export LD_FLAGS="-w -s -X github.com/Mrs4s/go-cqhttp/internal/base.Version=${COMMIT_ID::7}"
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
          go build -o "output/$BINARY_NAME" -trimpath -ldflags "$LD_FLAGS" .
      - name: Upload artifacts for release
        uses: actions/upload-artifact@v4
        if: ${{ !github.head_ref && github.event_name == 'push' }}
        with:
          name: ${{ env.BINARY_NAME }}
          path: output/${{ env.BINARY_NAME }}
  
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: ${{ !github.head_ref && github.event_name == 'push' }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: newest
          release_name: Newest Build
          draft: false
          prerelease: true
          
      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd artifacts
          for dir in */; do
            if [ -d "$dir" ]; then
              asset_name="${dir%/}"
              asset_path="$dir$asset_name"
              echo "Uploading $asset_name..."
              curl \
                -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$asset_path" \
                "${{ steps.create_release.outputs.upload_url }}?name=$asset_name"
            fi
          done